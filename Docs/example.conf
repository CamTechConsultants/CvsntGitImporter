# CVSNT to Git Importer example configuration file
#
# Each of the options in this file can also be specified on the command-line by
# adding -- before the option, e.g. --sandbox c:\Projects\MyProject

### General options ###

# Specifies the path to the checked out CVS source tree. Required.
# The files will not be modified, but an update that creates all empty
# directories will be performed.
sandbox <directory>

# Specifies the path where the Git repository will be created. Required.
# If the directory exists, it must be empty.
gitdir <directory>

# Specifies a folder where cached copies of versions of files are stored. This
# will make subsequent imports much faster if more than one import is performed.
cvs-cache cache

# Specifies how many CVS process to run in parallel when doing the import.
# Defaults to the number of processors in the system if not defined.
#cvs-processes 1

# Causes various debug log files to be created in the DebugLogs directory.
# Comment out to disable. If disabled, a single import.log file is still
# created.
debug

# Perform all the analysis, but don't actually do the import. Useful when
# debugging an import.
#noimport

# Specifies a file that contains the output of 'cvs rlog' of the CVS module
# being imported. This is mainly useful as a cache when testing and doing
# multiple imports without the source project being modified. It can be created
# manually by running 'cvs rlog myproject >myproject.log'
#cvs-log myproject.log


### Users ###

# Specifies the default domain to use for user's e-mail addresses. If not
# specified, the current hostname is used.
#default-domain example.com

# Specifies a file that lists usernames found in CVS and maps them to names and
# e-mail addresses to use in Git. If the user file is not provided, or a
# username is not found in the file, the username is left unmodified and the
# e-mail address is derived by combining the username with the default domain.
# The file consists of one record per line, with fields separated by tabs. There
# are three fields: the CVS username, the Git name and the Git e-mail address.
#user-file users.txt

# Specify a name to use when a Git operation has no CVS equivalent. Used for
# creating tags and for 'head-only' commits (see below).
nobody-name nobody

# Specify an e-mail address to use when a Git operation has no CVS equivalent.
# Used for creating tags and for 'head-only' commits (see below). If not
# specified, the default is to combine nobody-name with default-domain.
#nobody-email nobody@example.com


### File exclusions ###

# A regular expression pattern to match files or directories to exclude from the
# import. The filenames to match are CVS paths, so use forward slashes. The
# whole path of each file within the overall CVS module is matched.
# Can be specified more than once.

# Example: exclude all files with the .bak extension:
#exclude \.bak$

# Example: exclude the project/testdata module
#exclude ^project/testdata/


# A regular expression pattern to match files or directories to import, but
# only the latest version on the MAIN/master branch and no history. See the
# head-only-branch option below to specify additional branches to import.
# Any files that match this pattern are excluded from the import; once the
# import is complete an additional commit is made on each relevant branch with
# the latest version of the files.
# This is useful for larger files that are needed, but whose history is
# unimportant.
# Can be specified more than once.

#head-only ^docs/

# Specify an additional branch to perform the "head-only" commit for.
# Can be specified more than once.
#head-only-branch v1_0-branch


### Tags ###

# CvsntGitImport does not cope with "partial" tags or branches, i.e. those where
# only a subset of the project is tagged. This value is the threshold which if
# the number of files untagged exceeds, the tag is declared to be partial and
# not imported. The default value is 30.
#partial-tag-threshold 30

# Specify the tags to import. A series of rules can be specified using either
# include-tag or exclude-tag followed by a regular expression. The rules are all
# processed for each tag, with the last matching rule determining whether the
# tag is imported or not. If the first rule is include-tag then if no rules
# match, the tag is excluded, and if the first rule is exclude-tag then the
# default is to include. If no rules are specified, then all tags are imported.
#include-tag ^Version_\d+_\d+_\d+_\d+$
#exclude-tag ^Version_0_

# Rules to rename tags as they're imported, potentially taking advantage of
# Git's more generous set of allowable characters.
# Each rule is a regular expression pattern and a replacement string separated by
# a forward slash. Any captured expressions in the pattern can be referenced
# using $n in the replacement string. Any whitespace either side of the slash is
# ignored.
# This option can be specified more than once; the first matching rule is
# applied and then no others are considered.
#rename-tag ^Version_(\d+)_(\d+)_(\d+)_(\d) / v$1.$2.$3.$4


### Branches ###

# It turns out to be very difficult to automatically resolve a branch to a
# specific commit in the face of files being added and removed. A common scheme
# is to tag the branchpoint for branches. This option specifies a pattern to
# derive the branchpoint tag name from a branch name - CvsntGitImporter then
# resolves the tag to determine which commit the branch starts at.
# See rename-tag above for the format of the rule. Note that this option can
# only be specified once, however.
#branchpoint-rule ^(.*)-branch$ / $1-branchpoint

# Specify the branches to import. See include-tag/exclude-tag above for how
# these rules are processed.
#include-branch ^Version_\d_\d-branch$
#exclude-branch ^Version_0_

# Rename branches as they're imported. See rename-tag above.
#rename-branch ^Version_(\d+)_(\d+)-branch / v$1.$2
#rename-branch (.*)-branch$               / $1
